{"version":3,"sources":["components/scoreboard/score/Score.js","components/scoreboard/gameStatus/GameStatus.js","components/scoreboard/Scoreboard.js","components/gameplay/gameboard/square/Square.js","components/gameplay/gameboard/Gameboard.js","components/gameplay/gameover/Gameover.js","components/gameplay/Gameplay.js","components/restartBtn/RestartBtn.js","App.js","serviceWorker.js","index.js"],"names":["Score","_ref","score","playerOnMove","react_default","a","createElement","className","concat","X","O","GameStatus","isGameover","Scoreboard","score_Score","gameStatus_GameStatus","Square","symbol","handleMoveAttempt","boardPos","onClick","Gameboard","gameboard","map","index","square_Square","key","Gameover","isDraw","Gameplay","gameover_Gameover","gameboard_Gameboard","RestartBtn","handleGameRestart","App","state","Array","fill","gameover","resetGame","_this","setState","switchTurns","isMoveValid","pos","insertMove","prevState","Object","toConsumableArray","slice","isVictory","updateScore","filterPlayerOnMove","filter","el","victorySet","moves","strategy","length","every","includes","move","objectSpread","defineProperty","this","scoreboard_Scoreboard","gameplay_Gameplay","restartBtn_RestartBtn","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.28d51463.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Score.scss';\r\n\r\nfunction Score({score, playerOnMove}){\r\n    return (\r\n        <div className=\"Container-Score\">\r\n\r\n            <div className = {`Container-Score__Player ${playerOnMove === 'X' && 'Container-Score__Player--Highlighted'}`}>\r\n                <div>X</div>\r\n                <div>{ score.X === 0? '-': score.X }</div>\r\n            </div>\r\n\r\n            <div className = {`Container-Score__Player ${playerOnMove === 'O' && 'Container-Score__Player--Highlighted'}`}>\r\n                <div>O</div>\r\n                <div>{ score.O === 0? '-': score.O }</div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Score;","import React from 'react';\r\nimport './GameStatus.scss';\r\n\r\nfunction GameStatus({isGameover, playerOnMove}){\r\n    return (\r\n        <div className = 'Container-GameStatus__Message'>{isGameover? 'Game Over': `${playerOnMove} Turn`}</div>\r\n    );\r\n}\r\n \r\nexport default GameStatus;","import React from 'react';\r\n\r\nimport './Scoreboard.scss';\r\n\r\nimport Score from './score/Score';\r\nimport GameStatus from './gameStatus/GameStatus';\r\n\r\nfunction Scoreboard({score, playerOnMove, isGameover}){\r\n    return (\r\n        <div className = 'Container-Scoreboard'>\r\n            <Score score = {score} playerOnMove = {playerOnMove}/>\r\n            <GameStatus isGameover = {isGameover} playerOnMove = {playerOnMove}/>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Scoreboard;","import React from 'react';\r\n\r\nimport './Square.scss';\r\n\r\nfunction Square({symbol, handleMoveAttempt, boardPos}){\r\n    return ( \r\n        <div className = {`Container-Gameboard__Square Gameboard__Square--colour${symbol}`} onClick = {() => {handleMoveAttempt(boardPos)}}>\r\n            {symbol}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Square;","import React from 'react';\r\n\r\nimport './Gameboard.scss';\r\n\r\nimport Square from './square/Square';\r\n\r\nfunction Gameboard({gameboard, handleMoveAttempt}){\r\n    return ( \r\n        <div className = 'Container-Gameboard'>\r\n            {\r\n                gameboard.map((symbol, index) => {\r\n                    return(\r\n                        <Square \r\n                            key = {index}\r\n                            boardPos = {index}\r\n                            symbol = {symbol}\r\n                            handleMoveAttempt = {handleMoveAttempt}\r\n                            \r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Gameboard;","import React from 'react';\r\n\r\nimport './Gameover.scss';\r\n\r\nfunction Gameover({playerOnMove, isDraw}){\r\n    return (\r\n        <div className = 'Container-Gameover'>\r\n            <div className = 'Container-Gameover__WinnerAnnouncement'>{isDraw? 'OX': playerOnMove}</div>\r\n            <div className = 'Container-Gameover__Message'>{isDraw? 'Draw!': 'Winner!'}</div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Gameover;","import React from 'react';\r\n\r\nimport './Gameplay.scss';\r\n\r\nimport Gameboard from './gameboard/Gameboard';\r\nimport Gameover from './gameover/Gameover';\r\n\r\nfunction Gameplay({playerOnMove, gameboard, isGameover, handleMoveAttempt, isDraw}){\r\n    return (\r\n        <div className = 'Container-Gameplay'>\r\n            {\r\n                !isGameover ?\r\n\r\n                    <Gameboard \r\n                        gameboard = {gameboard}\r\n                        handleMoveAttempt = {handleMoveAttempt} \r\n                    /> :\r\n                    \r\n                    <Gameover playerOnMove = {playerOnMove} isDraw = {isDraw} />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Gameplay;","import React from 'react';\r\n\r\nimport './RestartBtn.scss';\r\n\r\nfunction RestartBtn({handleGameRestart}){\r\n    return (\r\n        <div className=\"Container-Btn__restart\">\r\n            <button className = 'Btn__Restart' onClick = {handleGameRestart}>Restart Game</button>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default RestartBtn;","import React, { Component } from 'react';\r\nimport './App.scss';\r\n\r\nimport Scoreboard from './components/scoreboard/Scoreboard';\r\nimport Gameplay from './components/gameplay/Gameplay';\r\nimport RestartBtn from './components/restartBtn/RestartBtn';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        score: {\r\n            'O': 0,\r\n            'X': 0,\r\n        },\r\n        playerOnMove: 'O',\r\n        gameboard: new Array(9).fill(null),\r\n        gameover: false\r\n    }\r\n\r\n    resetGame = () => {\r\n        this.setState({\r\n            gameboard: new Array(9).fill(null),\r\n            gameover: false\r\n        });\r\n    } \r\n\r\n    switchTurns = () => {\r\n        this.setState({\r\n            playerOnMove: this.state.playerOnMove === 'O' ? 'X' : 'O'\r\n        })\r\n    }\r\n\r\n    isMoveValid = (pos) => {\r\n\r\n        const gameover = this.state.gameover;\r\n        const boardPos = this.state.gameboard[pos];\r\n\r\n        if(!gameover && !boardPos){\r\n            this.insertMove(pos);\r\n        }\r\n\r\n    }\r\n\r\n    insertMove = (pos) => {\r\n        \r\n        this.setState( prevState => ({\r\n            gameboard: [...prevState.gameboard.slice(0, pos), \r\n                        this.state.playerOnMove, \r\n                        ...prevState.gameboard.slice(pos + 1, )],\r\n        }), () => {\r\n\r\n            const isVictory = this.isVictory()\r\n            const isDraw = this.isDraw();\r\n\r\n            if(isVictory){\r\n                this.gameover();\r\n                this.updateScore();\r\n            } else if(isDraw){\r\n                this.gameover();\r\n            } else{\r\n                this.switchTurns();\r\n            }\r\n\r\n        });\r\n\r\n    }\r\n\r\n    filterPlayerOnMove = () => {\r\n\r\n        const gameboard = this.state.gameboard;\r\n        const playerOnMove = this.state.playerOnMove;\r\n\r\n        return gameboard.map((symbol, index) => {\r\n\r\n            return (symbol === playerOnMove)? index: symbol\r\n        \r\n        }).filter(el => {\r\n\r\n            return typeof el === 'number';\r\n\r\n        });\r\n\r\n    }\r\n\r\n    isVictory = () => {\r\n        \r\n        const victorySet = [\r\n            [0, 1, 2],\r\n            [3, 4, 5],\r\n            [6, 7, 8],\r\n            [0, 3, 6],\r\n            [1, 4, 7],\r\n            [2, 5, 8],\r\n            [0, 4, 8],\r\n            [2, 4, 6]\r\n        ];\r\n\r\n        const moves = this.filterPlayerOnMove();\r\n\r\n        for (let strategy = 0; strategy < victorySet.length; strategy++) {\r\n\r\n            const isPlayerOnMoveVictorious = victorySet[strategy].every( pos => {\r\n                return moves.includes(pos)\r\n            });\r\n\r\n            if(isPlayerOnMoveVictorious){\r\n                return true\r\n            }\r\n\r\n        }\r\n\r\n        return false\r\n\r\n    }\r\n\r\n    isDraw = () => {\r\n        return this.state.gameboard.every((move) => {\r\n            return move !== null\r\n        })\r\n    }\r\n\r\n    gameover = () => {\r\n        this.setState({\r\n            gameover: true\r\n        })\r\n    }\r\n\r\n    updateScore = () => {\r\n        this.setState(prevState => ({\r\n            score: {\r\n                ...prevState.score, \r\n                [this.state.playerOnMove]: prevState.score[this.state.playerOnMove] + 1\r\n            }\r\n        }))\r\n    }    \r\n\r\n    render() {\r\n        const score = this.state.score;\r\n        const gameboard = this.state.gameboard;\r\n        const gameover = this.state.gameover;\r\n        const playerOnMove = this.state.playerOnMove;\r\n        const isMoveValid = this.isMoveValid;\r\n        const isDraw = this.isDraw();\r\n        const resetGame = this.resetGame;\r\n        \r\n        return (\r\n            <div className=\"App\">\r\n            \r\n                <Scoreboard \r\n                    score = {score} \r\n                    playerOnMove = {playerOnMove}\r\n                    isGameover = {gameover}\r\n                />\r\n\r\n                <Gameplay \r\n                    playerOnMove = {playerOnMove} \r\n                    gameboard = {gameboard} \r\n                    isGameover = {gameover}\r\n                    handleMoveAttempt = {isMoveValid}\r\n                    isDraw = {isDraw}\r\n                />\r\n\r\n                <RestartBtn handleGameRestart = {resetGame} />\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}